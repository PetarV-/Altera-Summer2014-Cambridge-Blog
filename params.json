{"name":"Altera-Summer2014-Cambridge","tagline":"","body":"### Week 2\r\nDuring the second week of our internship, we have:\r\n\r\n- Successfully achieved communication FPGA -> ARM, through directly writing to the ARM's SDRAM.\r\n- Extended this to support a logical memory model for the FPGA; more precisely:\r\n  * On the ARM, we implemented memory-mapping page-sized chunks, linked together in a doubly-linked list structure (such that the start of each chunk is filled with information such as size and pointers to the previous and next chunk).\r\n  * From the FPGA side, we have designed a custom component in Bluespec to handle memory address translation. It consists of:\r\n    - An Avalon slave connected to the hps2fpga bridge, receiving the address of the first page in the list from the ARM.\r\n    - Another Avalon slave which can be linked to any component's master, receiving a request to write at a particular logical address (word-indexed from 0); this request is then translated into the actual address(es) on the ARM and sent to\r\n    - An Avalon master connected to the fpga2hps bridge, writing directly into the relevant page(s) in the linked list structure on the ARM's SDRAM.\r\n- This is currently all implemented using polling, we're currently trying to get interrupts to work properly. We wrote a kernel module for the ARM that receives interrupts, and additional C code that processes them (by reading from a \"file\" provided by the module). However we didn't get it to work yet, probably due to different versions of the Linux kernel we have on the board and what was used to compile the module.\r\n- We also obtained additional SoCKit boards, which should help speed up development and give us a wider range of things to look at.\r\n\r\n---\r\nLawrence and Petar\r\n\r\n---\r\n\r\n### Week 1\r\nDuring the first week of our internship, we have:\r\n\r\n- Attended Altera's training session in High Wycombe;\r\n- Learnt the basics of Bluespec SystemVerilog and used it to program several example modules;\r\n- Got all of Quartus' tools to work by locating missing libraries, fixing rules for USB device permissions, etc;\r\n- Booted the ARM processor on the SoCKit using an SD card containing Linux;\r\n- Interfaced to the ARM in two ways: initially using Minicom over a USB connection, now also via Ethernet+SSH to ease file transfer.\r\n- Successfully programmed the FPGA using the ARM (on-boot) as well as JTAG.\r\n- Established basic communication ARM -> FPGA, in the following manner:\r\n  * Wrote a simple BSV module implementing an Avalon Slave that takes a number and returns it tripled;\r\n  * Connected the module to an 'HPS' component in Qsys and programmed the full design to the FPGA (using the ARM);\r\n  * Wrote a C program that writes integers to a memory-mapped hps2fpga bridge;\r\n  * Successfully ran the C program on the ARM chip, getting tripled values back from the FPGA.\r\n\r\nFor the following week, we hope to:\r\n\r\n- Achieve communication FPGA -> ARM (hopefully directly accessing SDRAM, maybe peripherals?);\r\n- Obtain a second SoC board.\r\n- Decide on a project.\r\n\r\n---\r\nLawrence and Petar","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}